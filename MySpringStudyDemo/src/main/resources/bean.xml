<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
          Bean的元素说明:
           1:id 唯一标示符
           2:class 要反射创建类的权限定类名 默认调用无参的构造函数
           3:scope:对象的作用范围 默认为Singleton 默认情况下是单列的
                    Singleton 单列的 由Spring来管理是否销毁
                    prototype  多列的 由JVM来管理是否销毁
                    request web 中一次request请求
                    session web 中一次session会话 存在session域中
                    global session 在集群环境中 一次session会话中
    -->
    <!--实例化bean的三种方式
        第一种: 配置一个Bean class=实现类的
                <bean id="accountService" class="com.study.MyAccountServiceImpl"></bean>

        第二种 静态工厂方法的方式
                创建一个静态类 提供一个静态方法返回实现类
        <bean id="accountService" class="com.study.StaticBeanFactory" factory-method="createAccountSeviceImpl"></bean>

        第三种 实例工厂 实例方法的方式
            创建一个一个实例工厂


    -->
    <!--第一种方法 service-->
    <bean id="accountService"
          class="com.study.MyAccountServiceImpl"
    p:age="18" p:name="张三p" p:brithday-ref="now"
    >
        <!--构造函数注入的方式 构造函数注入是在对象初始化的时候注入进去的-->
        <!--<constructor-arg name="age" value="12" ></constructor-arg>-->
        <!--<constructor-arg name="name" value="张三"></constructor-arg>-->
        <!--属性注入 是在对象实例化完成之后再注入的-->
        <!--<property name="age" value="123"></property>-->
        <!--<property name="name" value="helloWord"></property>-->
        <!--p标签的方式导入  如图上在标签内配置 本质上还是
        Property -ref只支持引用类型的数据

        -->


    </bean>

    <bean id="now" class="java.util.Date"></bean>
    <!--第二种方法 静态工厂-->
        <!--<bean id="accountService" class="com.study.StaticBeanFactory" factory-method="createAccountSeviceImpl"></bean>-->
    <!--
        第三种方法 实例工厂
    -->
    <!--<bean id="instanceFactory" class=" com.study.InstanceFactory"></bean>-->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="createAccountSeviceImpl"></bean>-->

</beans>