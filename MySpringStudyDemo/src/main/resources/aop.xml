<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--Spring AOP-->

        <!--
            切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)
                标准的表达式写法：
                    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                访问修饰符可以省略
                    void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                返回值可以使用通配符，表示任意返回值
                    * com.itheima.service.impl.AccountServiceImpl.saveAccount()
                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.
                    * *.*.*.*.AccountServiceImpl.saveAccount())
                包名可以使用..表示当前包及其子包
                    * *..AccountServiceImpl.saveAccount()
                类名和方法名都可以使用*来实现通配
                    * *..*.*()
                参数列表：
                    可以直接写数据类型：
                        基本类型直接写名称           int
                        引用类型写包名.类名的方式   java.lang.String
                    可以使用通配符表示任意类型，但是必须有参数
                    可以使用..表示有无参数均可，有参数可以是任意类型
                全通配写法：
                    * *..*.*(..)

                实际开发中切入点表达式的通常写法：
                    切到业务层实现类下的所有方法
                        * com.itheima.service.impl.*.*(..)

                        * *..*.*(..)

        -->
    <!--引入外部Config
    <context:property-placeholder location="classpath:jdbc.properties"/>
     开启spring对注解AOP的支持
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
    -->
    <bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:conf/appSetting.properties</value>
        </property>
    </bean>


    <bean id="logger" class="com.study.aop.Logger.Logger"></bean>
    <bean id="userService" class="com.study.AopTest.UserService"></bean>

    <!--AOP config-->
    <aop:config>
         <aop:pointcut id="pt1" expression="execution(* com.study.AopTest.*.*(..))"></aop:pointcut>
        <aop:aspect id="loggerAdvice" ref="logger">
            <!--切入点表达式 可以在AOP内部仅供这一个使用-->
            <!--配置通知-->
            <aop:before method="Info" pointcut="execution(* com.study.AopTest.*.*(..))"></aop:before>
        </aop:aspect>

    </aop:config>

</beans>